{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "name": "Assignment 6",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mtstanham/MSDS-422-Material/blob/master/Random%20Forest%2C%20Principle%20Component%20Analysis%20and%20Neural%20Nets\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JhFbm4VYiPK6",
        "colab_type": "text"
      },
      "source": [
        "# Random Forests, Prinicple Component Analysis, and Neural Nets"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S44RDODNiHsT",
        "colab_type": "text"
      },
      "source": [
        "In this assignment we conducted a random forest and PCA on an image dataset. \n",
        "\n",
        "Our baseline Random forest had a 01:06.615482 time duration, with a 0.96728 accuracy.\n",
        "\n",
        "After conducting PCA analysis at 95% variability, the number of principle components comes out to 332 components, down from originally 784 explanatory variables.\n",
        "\n",
        "Then we retrain the random forest with just the 332 rinciple components, our time goes down to 00:43.052280, with an accuracy of 0.93742.\n",
        "\n",
        "The conclusion is that with PCA, our runtime is shorter but our final model is less accurate.\n",
        "\n",
        "From a management perspective, the predictive accuracy of models must be weighed against the costs of model development and implementation. This was a data set of 70,000 images with 784 different pixels. If we were to conduct this type of analysis on millions or billions of images with more pixels, the computational time could be very high. \n",
        "\n",
        "Depending on how accurate the model needs to be, it may be worth using prinicple components in order to get a model which is marginally worse; but, can run in a fraction of the time it takes a normal random forest."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ej3kHuApNvTw",
        "colab_type": "text"
      },
      "source": [
        "For the secomd half of this notebook, I run 4 neural networks on a portion of the training data to prepare for the test data. The difference between the 4 Neural Nets are:\n",
        "2 layers and 10 nodes\n",
        "3 layers and 10 nodes\n",
        "2 layers and 20 nodes\n",
        "3 layers and 20 nodes\n",
        "\n",
        "Based on this study, the most complex model looks most accurate with 20 nodes and 3 layers. That being said, with a max 94% accuracy, I do not feel confident using this data as a higher level of accuracy will be needed for financial transactions. I liked adding additional layers more than nodes in terms of hyperparameter tuning"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iklgte_JjhO-",
        "colab_type": "code",
        "outputId": "50c2f58b-b5ee-45a6-e5a7-8260cf8f8d42",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Set the directory to the Google Drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4HW6qnCNj5y8",
        "colab_type": "code",
        "outputId": "483ddb9d-26cb-4782-a4bd-4d056409ebcc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "# After executing the cell above, Drive\n",
        "# files will be present in \"/content/drive/My Drive\".\n",
        "!ls \"/content/drive/My Drive\""
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " 403\t\t\t\t\t\t\t\t    test.csv\n",
            "' Analytical Use Case Prioritization and Impact Scorecard.gsheet'   train.csv\n",
            "'Colab Notebooks'\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sy3ZPq8miHsU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd ##DataFrame\n",
        "import os, numpy as np\n",
        "from datetime import datetime\n",
        "from sklearn.ensemble import RandomForestClassifier as rfc\n",
        "from sklearn.model_selection import RandomizedSearchCV as srch\n",
        "from sklearn.metrics import f1_score as f1\n",
        "from sklearn.preprocessing import StandardScaler as SS\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.model_selection import train_test_split #train test split\n",
        "\n",
        "pd.set_option('display.max_rows', 500)\n",
        "pd.set_option('display.max_columns', 500)\n",
        "pd.set_option('display.width', 150)\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "images = pd.read_csv(\"/content/drive/My Drive/train.csv\")\n",
        "images1 = pd.read_csv(\"/content/drive/My Drive/test.csv\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ah68w75jiHsY",
        "colab_type": "code",
        "outputId": "bbfb9bb3-14a5-41e3-d2e7-2bdab1d9f106",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        }
      },
      "source": [
        "#Copy of the original dataset\n",
        "df3 = images.copy()\n",
        "df4 = images1.copy()\n",
        "\n",
        "df3.info()\n",
        "df4.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 42000 entries, 0 to 41999\n",
            "Columns: 785 entries, label to pixel783\n",
            "dtypes: int64(785)\n",
            "memory usage: 251.5 MB\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 28000 entries, 0 to 27999\n",
            "Columns: 784 entries, pixel0 to pixel783\n",
            "dtypes: int64(784)\n",
            "memory usage: 167.5 MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PjEkW8R8iHsc",
        "colab_type": "code",
        "outputId": "5f4a234a-bb96-426c-9833-d7fb12d5692b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "images= df3.drop('label', axis = 1)\n",
        "\n",
        "###Keep the dependent variables separate\n",
        "labels = df3['label']\n",
        "\n",
        "images1= df4\n",
        "\n",
        "# check to make sure the dataset looks right\n",
        "print(images.shape, labels.shape, images1.shape) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(42000, 784) (42000,) (28000, 784)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J0qQrn3hiHsf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Set Up Train and Test Sets as arrays\n",
        "images,images1, labels =np.array(images),np.array(images1), np.array(labels)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KMH94VUlp7x4",
        "colab_type": "text"
      },
      "source": [
        "#Random Forest and PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hkR944gtiHsi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Run Initial Random Forest and Accuracy\n",
        "rf=rfc(random_state=1234, n_jobs=-1, n_estimators=100).fit(images,labels)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6zTnbotuiHsn",
        "colab_type": "code",
        "outputId": "45e2b255-12f0-4462-c7c0-dd1887fe2503",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "# Grid Search\n",
        "print(rfc().get_params())\n",
        "criterion, n_estimators=['entropy','gini'], [100,150,200]\n",
        "random_grid = {'criterion':criterion,'n_estimators': n_estimators}\n",
        "srch(estimator=rf, param_distributions=random_grid, \n",
        "                             n_iter=4,cv=2,verbose=2,random_state=12,n_jobs=-1).fit(images,labels).best_params_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'auto', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_impurity_split': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}\n",
            "Fitting 2 folds for each of 4 candidates, totalling 8 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   8 out of   8 | elapsed:  3.1min finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'criterion': 'gini', 'n_estimators': 150}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MseD7hXxiHsq",
        "colab_type": "code",
        "outputId": "06121aa0-a61a-4708-fd17-abc4ccd8ee14",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Time & Accuracy RF Fit\n",
        "rf=rfc(n_estimators=200, criterion='gini', bootstrap=True)    \n",
        "start=datetime.now()\n",
        "myfit=rf.fit(images,labels)\n",
        "end=datetime.now()\n",
        "\n",
        "#Produces the time taken to conduct the random forest prediction\n",
        "print(\"time:\", end-start) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time: 0:00:59.593286\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wJRaFcikiHs3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Run random forest on testing data\n",
        "rf_pred=rf.predict(images1)\n",
        "\n",
        "# Packaging submission up for logistic regression\n",
        "my_solution = pd.DataFrame(rf_pred, columns = ['label'])\n",
        "my_solution['ImageId'] = list(range(1,28001))\n",
        "my_solution=my_solution[['ImageId', 'label']]\n",
        "my_solution.set_index('ImageId', inplace=True)\n",
        "my_solution.to_csv(\"/content/drive/My Drive/submission_1 assignment 5.csv\")\n",
        "\n",
        "##Note Got a .96728 on the file on kaggle"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zwn_467fiHs5",
        "colab_type": "code",
        "outputId": "e0060487-74ab-49c4-abd6-a5766c8ee1bf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "# Time & Accuracy for RF PCA Fit\n",
        "\n",
        "#combine and scale the two data sets\n",
        "x=SS().fit_transform(np.concatenate((images,images1), axis=0))\n",
        "\n",
        "#PCA with a 95% variability\n",
        "start=datetime.now()\n",
        "pca=PCA(.95)\n",
        "totimages = pca.fit_transform(x)\n",
        "pca.n_components_ \n",
        "end=datetime.now()\n",
        "\n",
        "#Produces the time taken to conduct the random forest prediction\n",
        "print(\"time:\", end-start, \"\\n\",\"# of PCA Components:\",pca.n_components_) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time: 0:00:14.035106 \n",
            " # of PCA Components: 332\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hoVf8GlwiHs8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#make new training and testing data\n",
        "trainimages, testimages=totimages[0:42000,:].astype(int), totimages[42000:70000,:].astype(int)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZAsRmA9ziHs_",
        "colab_type": "code",
        "outputId": "33e9fdcf-9324-4316-c028-8d9a9f3233dd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#New Random Forest\n",
        "rf2=rfc(n_estimators=200, criterion='gini', bootstrap=True)\n",
        "\n",
        "#Training on new training data\n",
        "start=datetime.now()\n",
        "myfit2=rf2.fit(trainimages,labels)\n",
        "end=datetime.now()\n",
        "\n",
        "#Produces the time taken to conduct the random forest prediction with PCA\n",
        "print(\"time:\",end-start)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time: 0:00:36.993920\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G_wfuPiTiHtC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Run random forest on testing data\n",
        "rf2_pred=rf2.predict(testimages)\n",
        "\n",
        "# Packaging submission up for logistic regression\n",
        "my_solution = pd.DataFrame(rf2_pred, columns = ['label'])\n",
        "my_solution['ImageId'] = list(range(1,28001))\n",
        "my_solution=my_solution[['ImageId', 'label']]\n",
        "my_solution.set_index('ImageId', inplace=True)\n",
        "my_solution.to_csv(\"/content/drive/My Drive/submission_2 assignment 5.csv\")\n",
        "\n",
        "##Produced a score of 0.93742 on kaggle"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oJQBjKeEpwaS",
        "colab_type": "text"
      },
      "source": [
        "# Neural Network"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OLX0vj08iOwb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "##Bring in tensorflow\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers\n",
        "from sklearn.model_selection import train_test_split #train test split"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NtPLfoTU3Q_z",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "### splitting the testing and training data\n",
        "train_set, test_set = train_test_split(df3, test_size = 0.2, random_state = 1234)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rOlYI1vt3pA2",
        "colab_type": "code",
        "outputId": "4d8c8a74-8da8-4c3d-81bb-9af74bb524e3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "images= train_set.drop('label', axis = 1)\n",
        "\n",
        "###Keep the dependent variable separate\n",
        "labels = train_set['label']\n",
        "\n",
        "images1= test_set.drop('label', axis = 1)\n",
        "\n",
        "###Keep the dependent variable separate\n",
        "labels1 = test_set['label']\n",
        "\n",
        "# check to make sure the dataset looks right\n",
        "print(images.shape, labels.shape, images1.shape, labels1.shape) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(33600, 784) (33600,) (8400, 784) (8400,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p_2DHpdM39vp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Set Up Train and Test Sets as arrays\n",
        "images,images1, labels,labels1 =np.array(images),np.array(images1), np.array(labels), np.array(labels1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rP6-P3AGk6E6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Scalar transform the data\n",
        "x=SS().fit_transform(images)\n",
        "x1=SS().fit_transform(images1)\n",
        "\n",
        "#Change the labels to categorical variables\n",
        "keras_y=tf.keras.utils.to_categorical(labels,10)\n",
        "keras_y1=tf.keras.utils.to_categorical(labels1,10)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8zxczSklmtOC",
        "colab_type": "code",
        "outputId": "577f2586-2938-4f2c-83d8-a84e5c11b4d9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1054
        }
      },
      "source": [
        "# 2 layers and 10 nodes\n",
        "model= tf.keras.Sequential()\n",
        "model.add(layers.Dense(10,input_dim=784,activation='relu'))\n",
        "model.add(layers.Dense(10,activation='relu'))\n",
        "model.add(layers.Dense(10,activation='softmax'))\n",
        "model.compile(optimizer=\"adam\", loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
        "\n",
        "#Training on new training data\n",
        "start=datetime.now()\n",
        "history= model.fit(x, keras_y, epochs=30, validation_data=(x1,keras_y1))\n",
        "end=datetime.now()\n",
        "\n",
        "#Produces the time taken to conduct the neural net\n",
        "time=end-start\n",
        "print(\"time:\",time)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.6489 - categorical_accuracy: 0.7961 - val_loss: 0.3502 - val_categorical_accuracy: 0.8999\n",
            "Epoch 2/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2964 - categorical_accuracy: 0.9140 - val_loss: 0.2893 - val_categorical_accuracy: 0.9151\n",
            "Epoch 3/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2496 - categorical_accuracy: 0.9276 - val_loss: 0.2711 - val_categorical_accuracy: 0.9213\n",
            "Epoch 4/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2246 - categorical_accuracy: 0.9349 - val_loss: 0.2708 - val_categorical_accuracy: 0.9217\n",
            "Epoch 5/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2112 - categorical_accuracy: 0.9387 - val_loss: 0.2653 - val_categorical_accuracy: 0.9205\n",
            "Epoch 6/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2011 - categorical_accuracy: 0.9406 - val_loss: 0.2653 - val_categorical_accuracy: 0.9227\n",
            "Epoch 7/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1917 - categorical_accuracy: 0.9431 - val_loss: 0.2633 - val_categorical_accuracy: 0.9258\n",
            "Epoch 8/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1849 - categorical_accuracy: 0.9442 - val_loss: 0.2742 - val_categorical_accuracy: 0.9252\n",
            "Epoch 9/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1783 - categorical_accuracy: 0.9475 - val_loss: 0.2684 - val_categorical_accuracy: 0.9246\n",
            "Epoch 10/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1735 - categorical_accuracy: 0.9478 - val_loss: 0.2662 - val_categorical_accuracy: 0.9235\n",
            "Epoch 11/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1697 - categorical_accuracy: 0.9496 - val_loss: 0.2714 - val_categorical_accuracy: 0.9238\n",
            "Epoch 12/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1656 - categorical_accuracy: 0.9508 - val_loss: 0.2702 - val_categorical_accuracy: 0.9264\n",
            "Epoch 13/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1613 - categorical_accuracy: 0.9513 - val_loss: 0.2744 - val_categorical_accuracy: 0.9260\n",
            "Epoch 14/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1577 - categorical_accuracy: 0.9530 - val_loss: 0.2830 - val_categorical_accuracy: 0.9224\n",
            "Epoch 15/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1551 - categorical_accuracy: 0.9535 - val_loss: 0.2839 - val_categorical_accuracy: 0.9269\n",
            "Epoch 16/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1517 - categorical_accuracy: 0.9539 - val_loss: 0.2897 - val_categorical_accuracy: 0.9232\n",
            "Epoch 17/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1501 - categorical_accuracy: 0.9543 - val_loss: 0.2887 - val_categorical_accuracy: 0.9260\n",
            "Epoch 18/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1481 - categorical_accuracy: 0.9563 - val_loss: 0.2918 - val_categorical_accuracy: 0.9243\n",
            "Epoch 19/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1447 - categorical_accuracy: 0.9558 - val_loss: 0.3038 - val_categorical_accuracy: 0.9226\n",
            "Epoch 20/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1422 - categorical_accuracy: 0.9571 - val_loss: 0.3010 - val_categorical_accuracy: 0.9271\n",
            "Epoch 21/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1416 - categorical_accuracy: 0.9569 - val_loss: 0.3038 - val_categorical_accuracy: 0.9248\n",
            "Epoch 22/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1387 - categorical_accuracy: 0.9582 - val_loss: 0.3039 - val_categorical_accuracy: 0.9252\n",
            "Epoch 23/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1384 - categorical_accuracy: 0.9578 - val_loss: 0.3106 - val_categorical_accuracy: 0.9244\n",
            "Epoch 24/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1348 - categorical_accuracy: 0.9598 - val_loss: 0.3181 - val_categorical_accuracy: 0.9218\n",
            "Epoch 25/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1341 - categorical_accuracy: 0.9583 - val_loss: 0.3114 - val_categorical_accuracy: 0.9236\n",
            "Epoch 26/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1329 - categorical_accuracy: 0.9602 - val_loss: 0.3190 - val_categorical_accuracy: 0.9245\n",
            "Epoch 27/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1312 - categorical_accuracy: 0.9606 - val_loss: 0.3219 - val_categorical_accuracy: 0.9238\n",
            "Epoch 28/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1298 - categorical_accuracy: 0.9602 - val_loss: 0.3219 - val_categorical_accuracy: 0.9231\n",
            "Epoch 29/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1277 - categorical_accuracy: 0.9625 - val_loss: 0.3343 - val_categorical_accuracy: 0.9223\n",
            "Epoch 30/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1269 - categorical_accuracy: 0.9616 - val_loss: 0.3287 - val_categorical_accuracy: 0.9211\n",
            "time: 0:00:50.156300\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CmUhDo-P_0n_",
        "colab_type": "code",
        "outputId": "ca17494d-cb82-4e69-ca0a-348a70bc17f8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#Prediction Accuracy\n",
        "mypred=model.predict(x1)\n",
        "mypred=mypred.astype(int)\n",
        "delta=abs(mypred-keras_y1.astype(int))\n",
        "bynum=sum(delta)\n",
        "tot=sum(bynum)\n",
        "accuracy= 1-tot/(10000*10)\n",
        "print('Total Accuracy %: ',accuracy)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total Accuracy %:  0.92388\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h1lcQJszoAPh",
        "colab_type": "code",
        "outputId": "d5345de7-ff64-4efb-abfb-fe0adc087bc0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        }
      },
      "source": [
        "mytable=pd.DataFrame(history.history)\n",
        "print(mytable)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "        loss  categorical_accuracy  val_loss  val_categorical_accuracy\n",
            "0   0.657082              0.794226  0.363028                  0.895595\n",
            "1   0.303631              0.908125  0.307921                  0.909405\n",
            "2   0.252122              0.924345  0.278641                  0.917619\n",
            "3   0.222548              0.933214  0.265590                  0.923929\n",
            "4   0.204428              0.937768  0.254737                  0.927619\n",
            "5   0.189958              0.941845  0.249468                  0.926786\n",
            "6   0.181038              0.945625  0.247413                  0.925357\n",
            "7   0.172903              0.947441  0.236238                  0.930000\n",
            "8   0.165091              0.949494  0.241211                  0.931071\n",
            "9   0.159909              0.951131  0.239377                  0.930833\n",
            "10  0.154511              0.954048  0.239506                  0.933571\n",
            "11  0.149617              0.954792  0.239534                  0.934286\n",
            "12  0.146225              0.955536  0.244398                  0.933333\n",
            "13  0.141786              0.956577  0.240962                  0.934881\n",
            "14  0.138082              0.958274  0.246151                  0.933690\n",
            "15  0.136206              0.958780  0.248906                  0.933810\n",
            "16  0.132821              0.960060  0.254864                  0.931786\n",
            "17  0.130143              0.961071  0.254619                  0.931786\n",
            "18  0.127311              0.961815  0.260311                  0.931786\n",
            "19  0.125036              0.961369  0.258155                  0.931905\n",
            "20  0.120783              0.963839  0.254719                  0.933690\n",
            "21  0.120265              0.963363  0.264492                  0.931429\n",
            "22  0.117893              0.964435  0.266025                  0.934048\n",
            "23  0.115293              0.964702  0.269596                  0.932262\n",
            "24  0.114803              0.965000  0.270334                  0.933810\n",
            "25  0.111992              0.966548  0.271367                  0.933810\n",
            "26  0.111209              0.966042  0.272707                  0.931905\n",
            "27  0.108804              0.966369  0.278280                  0.934762\n",
            "28  0.107191              0.966994  0.278970                  0.933333\n",
            "29  0.106544              0.967143  0.284786                  0.932738\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lyQSrLaesccL",
        "colab_type": "code",
        "outputId": "e88c7fd1-5c00-434e-ad46-28ca47c130c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1054
        }
      },
      "source": [
        "# 3 layers and 10 nodes\n",
        "model1= tf.keras.Sequential()\n",
        "model1.add(layers.Dense(10,input_dim=784,activation='relu'))\n",
        "model1.add(layers.Dense(10,activation='relu'))\n",
        "model1.add(layers.Dense(10,activation='relu'))\n",
        "model1.add(layers.Dense(10,activation='softmax'))\n",
        "model1.compile(optimizer=\"adam\", loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
        "\n",
        "#Training on new training data\n",
        "start=datetime.now()\n",
        "history= model1.fit(x, keras_y, epochs=30, validation_data=(x1,keras_y1))\n",
        "end=datetime.now()\n",
        "\n",
        "#Produces the time taken to conduct the neural net\n",
        "time1=end-start\n",
        "print(\"time:\",time1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.7206 - categorical_accuracy: 0.7609 - val_loss: 0.4126 - val_categorical_accuracy: 0.8775\n",
            "Epoch 2/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.3586 - categorical_accuracy: 0.8928 - val_loss: 0.3552 - val_categorical_accuracy: 0.8964\n",
            "Epoch 3/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.3001 - categorical_accuracy: 0.9098 - val_loss: 0.3421 - val_categorical_accuracy: 0.8983\n",
            "Epoch 4/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2621 - categorical_accuracy: 0.9214 - val_loss: 0.3027 - val_categorical_accuracy: 0.9095\n",
            "Epoch 5/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2359 - categorical_accuracy: 0.9286 - val_loss: 0.2906 - val_categorical_accuracy: 0.9142\n",
            "Epoch 6/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2199 - categorical_accuracy: 0.9326 - val_loss: 0.2810 - val_categorical_accuracy: 0.9151\n",
            "Epoch 7/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2072 - categorical_accuracy: 0.9371 - val_loss: 0.2734 - val_categorical_accuracy: 0.9205\n",
            "Epoch 8/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1958 - categorical_accuracy: 0.9402 - val_loss: 0.2732 - val_categorical_accuracy: 0.9183\n",
            "Epoch 9/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1854 - categorical_accuracy: 0.9429 - val_loss: 0.2630 - val_categorical_accuracy: 0.9223\n",
            "Epoch 10/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1797 - categorical_accuracy: 0.9451 - val_loss: 0.2647 - val_categorical_accuracy: 0.9240\n",
            "Epoch 11/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1733 - categorical_accuracy: 0.9474 - val_loss: 0.2704 - val_categorical_accuracy: 0.9212\n",
            "Epoch 12/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1681 - categorical_accuracy: 0.9475 - val_loss: 0.2738 - val_categorical_accuracy: 0.9220\n",
            "Epoch 13/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1639 - categorical_accuracy: 0.9496 - val_loss: 0.2717 - val_categorical_accuracy: 0.9212\n",
            "Epoch 14/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1599 - categorical_accuracy: 0.9514 - val_loss: 0.2715 - val_categorical_accuracy: 0.9236\n",
            "Epoch 15/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1559 - categorical_accuracy: 0.9518 - val_loss: 0.2809 - val_categorical_accuracy: 0.9224\n",
            "Epoch 16/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1520 - categorical_accuracy: 0.9531 - val_loss: 0.2864 - val_categorical_accuracy: 0.9224\n",
            "Epoch 17/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1504 - categorical_accuracy: 0.9537 - val_loss: 0.2901 - val_categorical_accuracy: 0.9205\n",
            "Epoch 18/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1454 - categorical_accuracy: 0.9552 - val_loss: 0.2931 - val_categorical_accuracy: 0.9196\n",
            "Epoch 19/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1447 - categorical_accuracy: 0.9560 - val_loss: 0.2852 - val_categorical_accuracy: 0.9225\n",
            "Epoch 20/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1422 - categorical_accuracy: 0.9562 - val_loss: 0.2873 - val_categorical_accuracy: 0.9244\n",
            "Epoch 21/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1399 - categorical_accuracy: 0.9576 - val_loss: 0.2948 - val_categorical_accuracy: 0.9221\n",
            "Epoch 22/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1390 - categorical_accuracy: 0.9571 - val_loss: 0.2950 - val_categorical_accuracy: 0.9224\n",
            "Epoch 23/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1365 - categorical_accuracy: 0.9571 - val_loss: 0.3058 - val_categorical_accuracy: 0.9231\n",
            "Epoch 24/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1344 - categorical_accuracy: 0.9596 - val_loss: 0.3067 - val_categorical_accuracy: 0.9223\n",
            "Epoch 25/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1322 - categorical_accuracy: 0.9590 - val_loss: 0.3062 - val_categorical_accuracy: 0.9242\n",
            "Epoch 26/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1305 - categorical_accuracy: 0.9600 - val_loss: 0.3160 - val_categorical_accuracy: 0.9221\n",
            "Epoch 27/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1281 - categorical_accuracy: 0.9599 - val_loss: 0.3196 - val_categorical_accuracy: 0.9240\n",
            "Epoch 28/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1275 - categorical_accuracy: 0.9612 - val_loss: 0.3175 - val_categorical_accuracy: 0.9217\n",
            "Epoch 29/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1250 - categorical_accuracy: 0.9621 - val_loss: 0.3218 - val_categorical_accuracy: 0.9201\n",
            "Epoch 30/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1241 - categorical_accuracy: 0.9621 - val_loss: 0.3288 - val_categorical_accuracy: 0.9248\n",
            "time: 0:00:52.492775\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k-4q-ebPBmC3",
        "colab_type": "code",
        "outputId": "99167973-3184-4f72-a308-e47572eab898",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#Prediction Accuracy\n",
        "\n",
        "mypred=model1.predict(x1)\n",
        "mypred=mypred.astype(int)\n",
        "delta=abs(mypred-keras_y1.astype(int))\n",
        "bynum=sum(delta)\n",
        "tot=sum(bynum)\n",
        "accuracy1= 1-tot/(10000*10)\n",
        "print('Total Accuracy %: ',accuracy1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total Accuracy %:  0.91695\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kDnjqm1ssi2g",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mytable=pd.DataFrame(history.history)\n",
        "print(mytable)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m7vQZdXb848L",
        "colab_type": "code",
        "outputId": "11bb07ff-0512-4ea8-e271-aba8f1e5b549",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1054
        }
      },
      "source": [
        "#2 layers and 20 nodes\n",
        "model2= tf.keras.Sequential()\n",
        "model2.add(layers.Dense(20,input_dim=784,activation='relu'))\n",
        "model2.add(layers.Dense(20,activation='relu'))\n",
        "model2.add(layers.Dense(10,activation='softmax'))\n",
        "model2.compile(optimizer=\"adam\", loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
        "\n",
        "#Training on new training data\n",
        "start=datetime.now()\n",
        "history= model2.fit(x, keras_y, epochs=30, validation_data=(x1,keras_y1))\n",
        "end=datetime.now()\n",
        "\n",
        "#Produces the time taken to conduct the neural net\n",
        "time2=end-start\n",
        "print(\"time:\",time2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.4473 - categorical_accuracy: 0.8662 - val_loss: 0.2600 - val_categorical_accuracy: 0.9235\n",
            "Epoch 2/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.2029 - categorical_accuracy: 0.9409 - val_loss: 0.2240 - val_categorical_accuracy: 0.9313\n",
            "Epoch 3/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1625 - categorical_accuracy: 0.9514 - val_loss: 0.2013 - val_categorical_accuracy: 0.9419\n",
            "Epoch 4/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1370 - categorical_accuracy: 0.9584 - val_loss: 0.2028 - val_categorical_accuracy: 0.9411\n",
            "Epoch 5/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1194 - categorical_accuracy: 0.9637 - val_loss: 0.2018 - val_categorical_accuracy: 0.9437\n",
            "Epoch 6/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1050 - categorical_accuracy: 0.9677 - val_loss: 0.2012 - val_categorical_accuracy: 0.9464\n",
            "Epoch 7/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0952 - categorical_accuracy: 0.9705 - val_loss: 0.1987 - val_categorical_accuracy: 0.9465\n",
            "Epoch 8/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0878 - categorical_accuracy: 0.9726 - val_loss: 0.2074 - val_categorical_accuracy: 0.9432\n",
            "Epoch 9/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0794 - categorical_accuracy: 0.9745 - val_loss: 0.2143 - val_categorical_accuracy: 0.9465\n",
            "Epoch 10/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0750 - categorical_accuracy: 0.9760 - val_loss: 0.2116 - val_categorical_accuracy: 0.9470\n",
            "Epoch 11/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0675 - categorical_accuracy: 0.9782 - val_loss: 0.2226 - val_categorical_accuracy: 0.9458\n",
            "Epoch 12/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0627 - categorical_accuracy: 0.9802 - val_loss: 0.2349 - val_categorical_accuracy: 0.9452\n",
            "Epoch 13/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0580 - categorical_accuracy: 0.9818 - val_loss: 0.2348 - val_categorical_accuracy: 0.9437\n",
            "Epoch 14/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0531 - categorical_accuracy: 0.9830 - val_loss: 0.2458 - val_categorical_accuracy: 0.9456\n",
            "Epoch 15/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0516 - categorical_accuracy: 0.9828 - val_loss: 0.2492 - val_categorical_accuracy: 0.9449\n",
            "Epoch 16/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0483 - categorical_accuracy: 0.9844 - val_loss: 0.2568 - val_categorical_accuracy: 0.9456\n",
            "Epoch 17/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0428 - categorical_accuracy: 0.9858 - val_loss: 0.2710 - val_categorical_accuracy: 0.9449\n",
            "Epoch 18/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0428 - categorical_accuracy: 0.9861 - val_loss: 0.2809 - val_categorical_accuracy: 0.9458\n",
            "Epoch 19/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0389 - categorical_accuracy: 0.9876 - val_loss: 0.2847 - val_categorical_accuracy: 0.9435\n",
            "Epoch 20/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0378 - categorical_accuracy: 0.9879 - val_loss: 0.2988 - val_categorical_accuracy: 0.9429\n",
            "Epoch 21/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0365 - categorical_accuracy: 0.9873 - val_loss: 0.3153 - val_categorical_accuracy: 0.9410\n",
            "Epoch 22/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0338 - categorical_accuracy: 0.9885 - val_loss: 0.3024 - val_categorical_accuracy: 0.9460\n",
            "Epoch 23/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0319 - categorical_accuracy: 0.9899 - val_loss: 0.3393 - val_categorical_accuracy: 0.9417\n",
            "Epoch 24/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0276 - categorical_accuracy: 0.9913 - val_loss: 0.3412 - val_categorical_accuracy: 0.9418\n",
            "Epoch 25/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0283 - categorical_accuracy: 0.9901 - val_loss: 0.3578 - val_categorical_accuracy: 0.9417\n",
            "Epoch 26/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0265 - categorical_accuracy: 0.9912 - val_loss: 0.3475 - val_categorical_accuracy: 0.9439\n",
            "Epoch 27/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0259 - categorical_accuracy: 0.9912 - val_loss: 0.3787 - val_categorical_accuracy: 0.9404\n",
            "Epoch 28/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0232 - categorical_accuracy: 0.9923 - val_loss: 0.3944 - val_categorical_accuracy: 0.9379\n",
            "Epoch 29/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0249 - categorical_accuracy: 0.9916 - val_loss: 0.3911 - val_categorical_accuracy: 0.9431\n",
            "Epoch 30/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0237 - categorical_accuracy: 0.9916 - val_loss: 0.3929 - val_categorical_accuracy: 0.9417\n",
            "time: 0:00:50.182813\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AoSfcgjBButF",
        "colab_type": "code",
        "outputId": "b9f8bd51-2e25-4a38-e10e-efaeeaec3b94",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#Prediction Accuracy\n",
        "mypred=model2.predict(x1)\n",
        "mypred=mypred.astype(int)\n",
        "delta=abs(mypred-keras_y1.astype(int))\n",
        "bynum=sum(delta)\n",
        "tot=sum(bynum)\n",
        "accuracy2= 1-tot/(10000*10)\n",
        "print('Total Accuracy %: ',accuracy2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total Accuracy %:  0.95246\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jc92G98i88KX",
        "colab_type": "code",
        "outputId": "04e882d0-c672-4076-9943-4a63b41dc486",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        }
      },
      "source": [
        "mytable=pd.DataFrame(history.history)\n",
        "print(mytable)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "        loss  categorical_accuracy  val_loss  val_categorical_accuracy\n",
            "0   0.438813              0.868929  0.247525                  0.926786\n",
            "1   0.203255              0.939643  0.214357                  0.934881\n",
            "2   0.160174              0.951488  0.192889                  0.940714\n",
            "3   0.133886              0.958869  0.192894                  0.942024\n",
            "4   0.117112              0.963958  0.182917                  0.947500\n",
            "5   0.102492              0.968125  0.200935                  0.944286\n",
            "6   0.092925              0.970625  0.188011                  0.947381\n",
            "7   0.082664              0.973512  0.199957                  0.946905\n",
            "8   0.077175              0.974792  0.201688                  0.946190\n",
            "9   0.070136              0.976935  0.206975                  0.947976\n",
            "10  0.065068              0.979405  0.216251                  0.945357\n",
            "11  0.056290              0.982351  0.216789                  0.949048\n",
            "12  0.053659              0.982917  0.232964                  0.946548\n",
            "13  0.050977              0.984077  0.242979                  0.947262\n",
            "14  0.047716              0.984464  0.239201                  0.948690\n",
            "15  0.043715              0.986518  0.266593                  0.945119\n",
            "16  0.040108              0.986964  0.264205                  0.945357\n",
            "17  0.037438              0.988244  0.269038                  0.948571\n",
            "18  0.035677              0.988571  0.284317                  0.945000\n",
            "19  0.033317              0.989256  0.302213                  0.944405\n",
            "20  0.030461              0.990387  0.307307                  0.943095\n",
            "21  0.030923              0.990536  0.303491                  0.945000\n",
            "22  0.028806              0.990685  0.311837                  0.948095\n",
            "23  0.025804              0.991696  0.331790                  0.946548\n",
            "24  0.030114              0.990327  0.343792                  0.945595\n",
            "25  0.023861              0.992679  0.352844                  0.946786\n",
            "26  0.021916              0.992946  0.354650                  0.947619\n",
            "27  0.021149              0.993095  0.394363                  0.943333\n",
            "28  0.022171              0.993006  0.387195                  0.945952\n",
            "29  0.018523              0.993929  0.400910                  0.944643\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "95Vwkbj38-La",
        "colab_type": "code",
        "outputId": "7e64fcef-bd08-450b-fb5d-0298cbd13afa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1054
        }
      },
      "source": [
        "#3 layers and 20 nodes\n",
        "model3= tf.keras.Sequential()\n",
        "model3.add(layers.Dense(20,input_dim=784,activation='relu'))\n",
        "model3.add(layers.Dense(20,activation='relu'))\n",
        "model3.add(layers.Dense(20,activation='relu'))\n",
        "model3.add(layers.Dense(10,activation='softmax'))\n",
        "model3.compile(optimizer=\"adam\", loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
        "\n",
        "#Training on new training data\n",
        "start=datetime.now()\n",
        "history= model3.fit(x, keras_y, epochs=30, validation_data=(x1,keras_y1))\n",
        "end=datetime.now()\n",
        "\n",
        "#Produces the time taken to conduct the neural net\n",
        "time3=end-start\n",
        "print(\"time:\",time3)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.4589 - categorical_accuracy: 0.8630 - val_loss: 0.2460 - val_categorical_accuracy: 0.9281\n",
            "Epoch 2/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1942 - categorical_accuracy: 0.9418 - val_loss: 0.2242 - val_categorical_accuracy: 0.9355\n",
            "Epoch 3/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1539 - categorical_accuracy: 0.9526 - val_loss: 0.2074 - val_categorical_accuracy: 0.9420\n",
            "Epoch 4/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1315 - categorical_accuracy: 0.9592 - val_loss: 0.1939 - val_categorical_accuracy: 0.9432\n",
            "Epoch 5/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1182 - categorical_accuracy: 0.9634 - val_loss: 0.1992 - val_categorical_accuracy: 0.9432\n",
            "Epoch 6/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.1038 - categorical_accuracy: 0.9670 - val_loss: 0.2077 - val_categorical_accuracy: 0.9454\n",
            "Epoch 7/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0952 - categorical_accuracy: 0.9693 - val_loss: 0.2144 - val_categorical_accuracy: 0.9440\n",
            "Epoch 8/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0878 - categorical_accuracy: 0.9721 - val_loss: 0.2139 - val_categorical_accuracy: 0.9455\n",
            "Epoch 9/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0803 - categorical_accuracy: 0.9743 - val_loss: 0.2248 - val_categorical_accuracy: 0.9445\n",
            "Epoch 10/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0744 - categorical_accuracy: 0.9761 - val_loss: 0.2179 - val_categorical_accuracy: 0.9440\n",
            "Epoch 11/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0668 - categorical_accuracy: 0.9786 - val_loss: 0.2318 - val_categorical_accuracy: 0.9451\n",
            "Epoch 12/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0644 - categorical_accuracy: 0.9793 - val_loss: 0.2333 - val_categorical_accuracy: 0.9463\n",
            "Epoch 13/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0613 - categorical_accuracy: 0.9798 - val_loss: 0.2338 - val_categorical_accuracy: 0.9456\n",
            "Epoch 14/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0579 - categorical_accuracy: 0.9810 - val_loss: 0.2502 - val_categorical_accuracy: 0.9427\n",
            "Epoch 15/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0514 - categorical_accuracy: 0.9827 - val_loss: 0.2423 - val_categorical_accuracy: 0.9460\n",
            "Epoch 16/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0486 - categorical_accuracy: 0.9842 - val_loss: 0.2591 - val_categorical_accuracy: 0.9462\n",
            "Epoch 17/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0455 - categorical_accuracy: 0.9848 - val_loss: 0.2667 - val_categorical_accuracy: 0.9442\n",
            "Epoch 18/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0444 - categorical_accuracy: 0.9854 - val_loss: 0.2767 - val_categorical_accuracy: 0.9455\n",
            "Epoch 19/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0449 - categorical_accuracy: 0.9850 - val_loss: 0.2789 - val_categorical_accuracy: 0.9446\n",
            "Epoch 20/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0405 - categorical_accuracy: 0.9868 - val_loss: 0.2950 - val_categorical_accuracy: 0.9458\n",
            "Epoch 21/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0345 - categorical_accuracy: 0.9885 - val_loss: 0.3179 - val_categorical_accuracy: 0.9406\n",
            "Epoch 22/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0372 - categorical_accuracy: 0.9880 - val_loss: 0.3023 - val_categorical_accuracy: 0.9451\n",
            "Epoch 23/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0367 - categorical_accuracy: 0.9877 - val_loss: 0.3143 - val_categorical_accuracy: 0.9464\n",
            "Epoch 24/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0352 - categorical_accuracy: 0.9878 - val_loss: 0.3364 - val_categorical_accuracy: 0.9439\n",
            "Epoch 25/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0314 - categorical_accuracy: 0.9898 - val_loss: 0.3336 - val_categorical_accuracy: 0.9421\n",
            "Epoch 26/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0266 - categorical_accuracy: 0.9912 - val_loss: 0.3401 - val_categorical_accuracy: 0.9437\n",
            "Epoch 27/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0289 - categorical_accuracy: 0.9904 - val_loss: 0.3347 - val_categorical_accuracy: 0.9464\n",
            "Epoch 28/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0284 - categorical_accuracy: 0.9902 - val_loss: 0.3543 - val_categorical_accuracy: 0.9452\n",
            "Epoch 29/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0265 - categorical_accuracy: 0.9908 - val_loss: 0.3522 - val_categorical_accuracy: 0.9464\n",
            "Epoch 30/30\n",
            "1050/1050 [==============================] - 2s 2ms/step - loss: 0.0249 - categorical_accuracy: 0.9913 - val_loss: 0.3698 - val_categorical_accuracy: 0.9442\n",
            "time: 0:00:51.442009\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rc8TK4CiB_e5",
        "colab_type": "code",
        "outputId": "701db834-a0ed-40dc-a9b6-4cc1e8cb09a4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#Prediction Accuracy\n",
        "\n",
        "mypred=model3.predict(x1)\n",
        "mypred=mypred.astype(int)\n",
        "delta=abs(mypred-keras_y1.astype(int))\n",
        "bynum=sum(delta)\n",
        "tot=sum(bynum)\n",
        "accuracy3= 1-tot/(10000*10)\n",
        "print('Total Accuracy %: ',accuracy3)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total Accuracy %:  0.95471\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7WquNQSH89C-",
        "colab_type": "code",
        "outputId": "f5f176d2-d9b1-4d9f-a684-d49cb8f30139",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        }
      },
      "source": [
        "mytable=pd.DataFrame(history.history)\n",
        "print(mytable)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "        loss  categorical_accuracy  val_loss  val_categorical_accuracy\n",
            "0   0.494137              0.847798  0.260521                  0.924762\n",
            "1   0.216289              0.935089  0.228685                  0.932619\n",
            "2   0.169061              0.948661  0.217540                  0.934643\n",
            "3   0.144686              0.954732  0.212891                  0.939762\n",
            "4   0.125815              0.960625  0.204442                  0.941548\n",
            "5   0.111902              0.965744  0.214449                  0.939286\n",
            "6   0.100146              0.968601  0.214441                  0.941429\n",
            "7   0.089043              0.972351  0.228565                  0.941667\n",
            "8   0.083377              0.972917  0.218941                  0.944167\n",
            "9   0.075966              0.975357  0.217095                  0.945952\n",
            "10  0.071052              0.976607  0.225987                  0.945714\n",
            "11  0.067459              0.977917  0.230539                  0.943929\n",
            "12  0.062629              0.980060  0.239907                  0.944643\n",
            "13  0.056434              0.981220  0.238339                  0.943929\n",
            "14  0.053716              0.982798  0.253214                  0.944286\n",
            "15  0.049928              0.983691  0.255173                  0.945238\n",
            "16  0.045564              0.985238  0.280075                  0.943690\n",
            "17  0.046543              0.984315  0.270741                  0.945833\n",
            "18  0.040966              0.985714  0.278708                  0.944167\n",
            "19  0.041389              0.986905  0.293119                  0.943690\n",
            "20  0.037942              0.988006  0.302600                  0.942738\n",
            "21  0.036765              0.987202  0.298657                  0.945238\n",
            "22  0.034163              0.988006  0.331439                  0.940833\n",
            "23  0.035346              0.987768  0.303270                  0.944524\n",
            "24  0.030573              0.989940  0.324322                  0.945595\n",
            "25  0.026363              0.991488  0.339485                  0.944167\n",
            "26  0.030929              0.989167  0.346594                  0.945000\n",
            "27  0.030286              0.989702  0.366268                  0.942500\n",
            "28  0.025389              0.991250  0.354223                  0.943452\n",
            "29  0.022113              0.992530  0.381472                  0.942976\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NS7V-9O0-21-",
        "colab_type": "text"
      },
      "source": [
        "# Test the models"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tM8zq0A9-2Pc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Transform the kaggle Test data\n",
        "x2=SS().fit_transform(df4)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZNjRWaKs_Spv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#create predictions\n",
        "results=model.predict(x2)\n",
        "results =np.argmax(results,axis = 1)\n",
        "results =pd.Series(results,name=\"label\")\n",
        "\n",
        "my_solution = pd.DataFrame(results, columns = ['label'])\n",
        "my_solution['ImageId'] = list(range(1,28001))\n",
        "my_solution=my_solution[['ImageId', 'label']]\n",
        "my_solution.set_index('ImageId', inplace=True)\n",
        "my_solution.to_csv(\"submission_1 assignment 6.csv\")\n",
        "\n",
        "###Scored a 0.91900 "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ulXyfI6KGFLb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#create predictions\n",
        "results=model1.predict(x2)\n",
        "results =np.argmax(results,axis = 1)\n",
        "results =pd.Series(results,name=\"label\")\n",
        "\n",
        "my_solution = pd.DataFrame(results, columns = ['label'])\n",
        "my_solution['ImageId'] = list(range(1,28001))\n",
        "my_solution=my_solution[['ImageId', 'label']]\n",
        "my_solution.set_index('ImageId', inplace=True)\n",
        "my_solution.to_csv(\"submission_2 assignment 6.csv\")\n",
        "\n",
        "###Scored a 0.92057 "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vfulCuW4GIxm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#create predictions\n",
        "results=model2.predict(x2)\n",
        "results =np.argmax(results,axis = 1)\n",
        "results =pd.Series(results,name=\"label\")\n",
        "\n",
        "my_solution = pd.DataFrame(results, columns = ['label'])\n",
        "my_solution['ImageId'] = list(range(1,28001))\n",
        "my_solution=my_solution[['ImageId', 'label']]\n",
        "my_solution.set_index('ImageId', inplace=True)\n",
        "my_solution.to_csv(\"submission_3 assignment 6.csv\")\n",
        "\n",
        "###Scored a 0.94285"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vXyl8wSqGL2A",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#create predictions\n",
        "results=model3.predict(x2)\n",
        "results =np.argmax(results,axis = 1)\n",
        "results =pd.Series(results,name=\"label\")\n",
        "\n",
        "my_solution = pd.DataFrame(results, columns = ['label'])\n",
        "my_solution['ImageId'] = list(range(1,28001))\n",
        "my_solution=my_solution[['ImageId', 'label']]\n",
        "my_solution.set_index('ImageId', inplace=True)\n",
        "my_solution.to_csv(\"submission_4 assignment 6.csv\")\n",
        "\n",
        "###Scored a 0.94428 "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2MZC_yXKDZpp",
        "colab_type": "code",
        "outputId": "a6765cac-3836-4768-d42d-c68cf4016f3a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        }
      },
      "source": [
        "#Final Table of Results\n",
        "\n",
        "t={'# of Layers':[2,3,2,3],'Nodes per Layer':[10,10,20,20],'Time':[time, time1, time2, time3],\n",
        "   'Training Accuracy':[accuracy,accuracy1,accuracy2,accuracy3],'Test Accuracy':[0.91900,0.92057,0.94285,0.94428]}\n",
        "table = pd.DataFrame(data=t)\n",
        "table"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th># of Layers</th>\n",
              "      <th>Nodes per Layer</th>\n",
              "      <th>Time</th>\n",
              "      <th>Training Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>00:00:50.156300</td>\n",
              "      <td>0.92388</td>\n",
              "      <td>0.91900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>00:00:52.492775</td>\n",
              "      <td>0.91695</td>\n",
              "      <td>0.92057</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>00:00:50.182813</td>\n",
              "      <td>0.95246</td>\n",
              "      <td>0.94285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>20</td>\n",
              "      <td>00:00:51.442009</td>\n",
              "      <td>0.95471</td>\n",
              "      <td>0.94428</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   # of Layers  Nodes per Layer            Time  Training Accuracy  Test Accuracy\n",
              "0            2               10 00:00:50.156300            0.92388        0.91900\n",
              "1            3               10 00:00:52.492775            0.91695        0.92057\n",
              "2            2               20 00:00:50.182813            0.95246        0.94285\n",
              "3            3               20 00:00:51.442009            0.95471        0.94428"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    }
  ]
}